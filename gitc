#!/usr/bin/env bash
#
# gitc ‚Äî add/commit helper that can auto-generate a commit message
#        (or code-review) with OpenAI.
#

PROMPT_COMMIT_MESSAGE="Summarize the following code changes as a concise commit message."
PROMPT_REVIEW="Review the following code changes and provide feedback. Do you see any potential issues or bugs? If you see bugs, start bug report with '### üêû bug:' prefix. If you think a bug is severe, use two or three bug enojis üêû."

yellow_text() { printf '\033[1;33m%s\033[0m\n' "$1"; }
red_text()    { printf '\033[1;31m%s\033[0m\n' "$1"; }
green_text()  { printf '\033[1;32m%s\033[0m\n' "$1"; }

print_usage() {
  cat <<EOF
Usage: gitc [-a] [-r] [path]
  -a   Stage all tracked changes (like \`git add -u\`)
  -r   Ask for a *review* instead of a commit message
  path Path (file/dir) to add & commit
EOF
}

# --- prerequisites -----------------------------------------------------------

need_cmd() {
  command -v "$1" >/dev/null 2>&1 || { red_text "Missing dependency: $1"; exit 1; }
}

# --- main --------------------------------------------------------------------

gitc() {
  need_cmd git
  need_cmd curl
  need_cmd jq

  [[ -n $OPENAI_API_KEY ]] || { red_text "OPENAI_API_KEY not set."; return 1; }

  local auto_add=false review_requested=false
  local prompt="$PROMPT_COMMIT_MESSAGE"
  local diff_cmd=(git diff --cached)
  local temperature=0.2 max_tokens=40
  local model="${GITC_OPENAI_MODEL:-gpt-4o}"   # override via env if desired

  local git_root; git_root=$(git rev-parse --show-toplevel) || return 1

  while getopts ":ahr" opt; do
    case $opt in
      a) auto_add=true ;;
      r)
        diff_cmd=(git diff --cached -U20)
        max_tokens=1000
        prompt="$PROMPT_REVIEW"
        model="${GITC_OPENAI_REVIEW_MODEL:-gpt-4.1}"
        review_requested=true
        ;;
      h) print_usage; return 0 ;;
      \?) print_usage; return 1 ;;
    esac
  done
  shift $((OPTIND - 1))

  local path_to_commit=$1

  update_diff() { DIFF=$("${diff_cmd[@]}"); }

  update_diff
  if [[ -n $path_to_commit ]]; then
    if [[ -n $DIFF ]]; then
      red_text "There are already staged changes; refusing to commit a specific path."
      return 1
    fi
    echo "Adding $path_to_commit"
    git add --verbose -- "$path_to_commit" || return 1
    update_diff
  fi

  if $auto_add; then
    if [[ -n $DIFF ]]; then
      red_text "Cannot use -a when there are already staged changes."
      return 1
    fi
    yellow_text "Staging all tracked changes (-u)."
    git add -u "$git_root"
    update_diff
  fi

  if [[ -z $DIFF ]]; then
    yellow_text "No changes to commit."
    return 0
  fi

  # run pre-commit on staged files only
  if [[ -f $git_root/.pre-commit-config.yaml ]]; then
    mapfile -t staged_files < <(git diff --name-only --cached)
    if [[ ${#staged_files[@]} -gt 0 ]]; then
      pre-commit run --files "${staged_files[@]}" || {
        red_text "Pre-commit hooks failed; fix issues and retry."
        git reset --soft HEAD
        return 1
      }
    fi
  fi


  # JSON-escape diff & call OpenAI
  local json_diff; json_diff=$(jq -Rs . <<<"$DIFF")
  local response; response=$(curl -sS https://api.openai.com/v1/chat/completions \
      -H "Content-Type: application/json" \
      -H "Authorization: Bearer $OPENAI_API_KEY" \
      -d "{
            \"model\": \"$model\",
            \"messages\": [
              {\"role\": \"system\", \"content\": \"$prompt\"},
              {\"role\": \"user\", \"content\": $json_diff}
            ],
            \"temperature\": $temperature,
            \"max_tokens\": $max_tokens
          }")

  # extract message or error, check jq success
  local commit_msg
  if ! commit_msg=$(jq -r '.choices[0].message.content // empty' <<<"$response"); then
    red_text "Failed to parse OpenAI API response (commit message) with jq."
    git reset --soft HEAD
    return 1
  fi
  if [[ -z $commit_msg ]]; then
    local api_err
    if ! api_err=$(jq -r '.error.message // empty' <<<"$response"); then
      red_text "Failed to parse OpenAI API error message with jq."
      git reset --soft HEAD
      return 1
    fi
    red_text "OpenAI API error: ${api_err:-unknown}"
    git reset --soft HEAD
    return 1
  fi

  if $review_requested; then
    echo "$commit_msg"
    return 0
  fi

  # commit using stdin (avoids shell-quoting issues)
  printf '%s\n' "$commit_msg" | git commit --no-verify -F - || return 1
  green_text "Committed."

  # prompt for push
  read -r -p "Push now? [y/N]: " push_answer
  if [[ $push_answer =~ ^[Yy]$ ]]; then
    git push && green_text "Pushed."
  fi
}
